import {
  Start,
  Update,
  Ctx,
  On,
  Action,
  Wizard,
  WizardStep,
  InjectBot,
} from "nestjs-telegraf";
import { Context, Markup, Telegraf } from "telegraf";
import { BotService } from "../bot.service";
import { Injectable } from "@nestjs/common";
import { CallbackQuery } from "telegraf/typings/core/types/typegram";
import { SceneSessionData } from "telegraf/typings/scenes";

interface MyContext extends Context {
  session?: SceneSessionData;
}

interface WizardContext extends Context {
  scene: any;
  wizard: {
    next: () => Promise<void>;
    state: {
      userData: {
        name?: string;
        age?: number;
        occupation?: string;
        traits: string[];
      };
    };
  };
}

// function createInlineKeyboard(selectedTraits: string[]) {
//   const options = [
//     "üòÑ –≠–∫—Å—Ç—Ä–∞–≤–µ—Ä—Ç",
//     "üßê –ò–Ω—Ç—Ä–æ–≤–µ—Ä—Ç",
//     "‚úÖ –î—É—à–Ω–∏–ª–∞",
//     "üëø –¢–æ–∫—Å–∏–∫",
//     "üåå –ê—Ç–µ–∏—Å—Ç",
//     "üïäÔ∏è –†–µ–ª–∏–≥–∏–æ–∑–Ω—ã–π",
//     "üí• –°–ø–æ–Ω—Ç–∞–Ω–Ω—ã–π",
//     "‚è∞ –û—Ä–≥–∞–Ω–∏–∑–æ–≤–∞–Ω–Ω—ã–π",
//   ];
//   const buttons = options.map((option) => [
//     Markup.button.callback(
//       (selectedTraits.includes(option) ? "‚úîÔ∏è " : "") + option,
//       `toggle_${option}`
//     ),
//   ]);
//   buttons.push([Markup.button.callback("–ì–æ—Ç–æ–≤–æ!", "done")]);
//   return Markup.inlineKeyboard(buttons, { columns: 2 });
// }

@Update()
@Injectable()
@Wizard("registration-wizard")
export class RegistrationScene {
  constructor(
    private readonly botService: BotService,
    @InjectBot() private bot: Telegraf<any>
  ) {}

  @WizardStep(1)
  async startWizard(ctx: WizardContext) {
    ctx.wizard.state.userData = { traits: [] };
    //@ts-ignore
    console.log(ctx?.session);
    await ctx.reply(
      "–û—Ç–ª–∏—á–Ω–æ, –æ—Ç–≤–µ—Ç—å –Ω–∞ —Å–ª–µ–¥—É—é—â–∏–µ –≤–æ–ø—Ä–æ—Å—ã:\n–ö–∞–∫ —Ç–µ–±—è –∑–æ–≤—É—Ç?",
      Markup.forceReply()
    );
    ctx.wizard.next();
  }

  @WizardStep(2)
  async getName(ctx: WizardContext) {
    if ("text" in ctx.message && ctx.message.text) {
      ctx.wizard.state.userData.name = ctx.message.text;
      await ctx.reply(
        `–ü—Ä–∏—è—Ç–Ω–æ –ø–æ–∑–Ω–∞–∫–æ–º–∏—Ç—å—Å—è, ${ctx.message.text}! –°–∫–æ–ª—å–∫–æ —Ç–µ–±–µ –ª–µ—Ç?`,
        Markup.forceReply()
      );
      ctx.wizard.next();
    }
    return;
  }

  @WizardStep(3)
  async getAge(ctx: WizardContext) {
    if ("text" in ctx.message && ctx.message.text) {
      const age = parseInt(ctx.message.text);
      if (isNaN(age)) {
        return await ctx.reply(
          "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≤–æ–∑—Ä–∞—Å—Ç —Ü–∏—Ñ—Ä–∞–º–∏"
        );
      }

      ctx.wizard.state.userData.age = age;
      await ctx.reply(
        "–ö–µ–º —Ç—ã —Ä–∞–±–æ—Ç–∞–µ—à—å / —á–µ–º –∑–∞–Ω–∏–º–∞–µ—à—å—Å—è?\n" +
          "–ú–æ–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Ç–µ–∫—Å—Ç –¥–ª–∏–Ω–æ–π –¥–æ 80 —Å–∏–º–≤–æ–ª–æ–≤."
      );
      ctx.wizard.next();
    }
    return;
  }

  //   @WizardStep(4)
  //   async getOccupation(ctx: WizardContext) {
  //     if ("text" in ctx.message && ctx.message.text) {
  //       ctx.wizard.state.userData.occupation = ctx.message.text;
  //       await ctx.reply(
  //         "–ö–∞–∫–æ–π —Ç—ã —á–µ–ª–æ–≤–µ–∫? –ú–æ–∂–Ω–æ –≤—ã–±—Ä–∞—Ç—å –º–∞–∫—Å–∏–º—É–º 4 –≤–∞–π–±–∞",
  //         Markup.inlineKeyboard([
  //           [Markup.button.callback("üòÑ –≠–∫—Å—Ç—Ä–∞–≤–µ—Ä—Ç", "trait_extrovert")],
  //           [Markup.button.callback("üßê –ò–Ω—Ç—Ä–æ–≤–µ—Ä—Ç", "trait_introvert")],
  //           [Markup.button.callback("‚úÖ –î—É—à–Ω–∏–ª–∞", "trait_annoying")],
  //           [Markup.button.callback("üëø –¢–æ–∫—Å–∏–∫", "trait_toxic")],
  //         ])
  //       );
  //       return await ctx.scene.leave();
  //     }
  //     return;
  //   }
  //   @WizardStep(5)
  //   async getTraits(ctx: WizardContext) {

  //     if ("text" in ctx.message && ctx.message.text) {
  //       ctx.wizard.state.userData.occupation = ctx.message.text;
  //       await ctx.reply(
  //         "–û —á–µ–º —Ç–µ–±–µ –∏–Ω—Ç–µ—Ä–µ—Å–Ω–æ –ø–æ–≥–æ–≤–æ—Ä–∏—Ç—å? –ú–æ–∂–Ω–æ –≤—ã–±—Ä–∞—Ç—å –º–∞–∫—Å–∏–º—É–º 4 —Ç–µ–º—ã",
  //         Markup.inlineKeyboard([
  //           [Markup.button.callback("üòÑ –ö—Ä–∏–ø—Ç–∞", "trait_extrovert")],
  //           [Markup.button.callback("üßê –Ω–µ –∫—Ä–∏–ø—Ç–∞", "trait_introvert")],
  //         ])
  //       );
  //       return await ctx.scene.leave();
  //     }
  //     return;
  //   }

  //   @WizardStep(4)
  //   async start(@Ctx() ctx: WizardContext) {
  //     ctx.wizard.state.userData.traits = []; // Initialize the selected traits array
  //     await ctx.reply(
  //       "–ö–∞–∫–æ–π —Ç—ã —á–µ–ª–æ–≤–µ–∫? –ú–æ–∂–Ω–æ –≤—ã–±—Ä–∞—Ç—å –º–∞–∫—Å–∏–º—É–º 4 –≤–∞–π–±–∞",
  //       createInlineKeyboard(ctx.session.selectedTraits)
  //     );
  //     return ctx.wizard.next(); // Move to the next step to handle interactions
  //   }

  //   @WizardStep(4)
  //   @Action(/toggle_(.+)/)
  //   async handleSelection(@Ctx() ctx: MyContext) {
  //     const trait = ctx.match[1]; // Extract the trait from callback data

  //     // Toggle the trait in the session state
  //     if (ctx.session.selectedTraits.includes(trait)) {
  //       ctx.session.selectedTraits = ctx.session.selectedTraits.filter(
  //         (item) => item !== trait
  //       );
  //     } else if (ctx.session.selectedTraits.length < 4) {
  //       ctx.session.selectedTraits.push(trait);
  //     } else {
  //       await ctx.answerCbQuery(
  //         "–î–æ—Å—Ç–∏–≥–Ω—É—Ç–æ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö –ø—É–Ω–∫—Ç–æ–≤."
  //       );
  //       return;
  //     }

  //     // Update the keyboard with the new state
  //     await ctx.editMessageReplyMarkup(
  //       createInlineKeyboard(ctx.session.selectedTraits).reply_markup
  //     );
  //   }

  //   @WizardStep(4)
  //   @Action("done")
  //   async handleDone(@Ctx() ctx: Context) {
  //     if (!ctx.session.selectedTraits.length) {
  //       await ctx.reply("–í—ã –Ω–µ –≤—ã–±—Ä–∞–ª–∏ –Ω–∏ –æ–¥–Ω–æ–≥–æ –≤–∞–π–±–∞.");
  //     } else {
  //       await ctx.reply(
  //         `–í—ã –≤—ã–±—Ä–∞–ª–∏ —Å–ª–µ–¥—É—é—â–∏–µ –≤–∞–π–±—ã: ${ctx.session.selectedTraits.join(", ")}`
  //       );
  //     }
  //     ctx.session.selectedTraits = []; // Reset the session
  //     return ctx.scene.leave(); // End the wizard
  //   }
}
