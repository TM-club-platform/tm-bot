import { Injectable } from "@nestjs/common";
import { BaseSelectionHandler } from "./base-selection.handler";
import { WizardContext } from "../types";

@Injectable()
export class TextAnketaHandler extends BaseSelectionHandler {
  async promptForSelection(ctx: WizardContext): Promise<void> {
    await this.promptForDescription(ctx);
  }

  async promptForDescription(ctx: WizardContext): Promise<void> {
    await ctx.reply(
      "–ê —Ç–µ–ø–µ—Ä—å —Å–∞–º–æ–µ –≤—Ä–µ–º—è –Ω–∞–ø–∏—Å–∞—Ç—å –æ–±—ä—è–≤–ª–µ–Ω–∏–µ –∏ —Ä–∞—Å—Å–∫–∞–∑–∞—Ç—å —Å–≤–æ–∏–º —Ç—Ä–µ–≤–µ–ª-–º–µ–π—Ç–∞–º, —á—Ç–æ —Ç—ã –∑–¥–µ—Å—å –∏—â–µ—à—å, —á—Ç–æ–±—ã —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞—Ç—å—Å—è –ø–æ –∂–µ–ª–∞–Ω–∏—è–º –∏ –æ–∂–∏–¥–∞–Ω–∏—è–º üòä"
    );

    await ctx.replyWithPhoto({ source: "assets/what_write_in_anketa.jpeg" });

    await ctx.reply("–ß—Ç–æ —Ç—ã –∑–¥–µ—Å—å –∏—â–µ—à—å?");
  }

  async handleDescription(ctx: WizardContext): Promise<boolean> {
    if (!("text" in ctx.message) || typeof ctx.message.text !== "string") {
      await ctx.reply("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ");
      return false;
    }

    ctx.wizard.state.userData.description = ctx.message.text;
    return true;
  }
}
